# Iterar sobre los valores de AAAAMM desde 201801 hasta 201809
for year_month in range(201801, 201810):
    # Generar el nombre del archivo de entrada
    input_file_name = f'saa_query_final_{year_month}.txt'
    
    # Leer el contenido del archivo de texto
    try:
        with open(input_file_name, 'r', encoding='utf-8') as file:
            content = file.read()
    except FileNotFoundError:
        print(f"Archivo {input_file_name} no encontrado. Se omite.")
        continue
    
    # Filtrar filas en listado_de_ref por FECHA (AAAAMM)
    filtered_df = listado_de_ref[listado_de_ref['FECHA'] == str(year_month)]
    
    # Buscar y extraer los bloques de texto para cada H8CREF_CONCAT en el archivo actual
    for h8cref_concat in filtered_df['H8CREF_CONCAT']:
        # Buscar la posición del H8CREF_CONCAT
        h8cref_pos = content.find(h8cref_concat)
        
        if h8cref_pos != -1:
            # Buscar el primer <PEPITO:"GRILLO"> anterior a la posición de H8CREF_CONCAT
            pepito_start_pos = content.rfind('<PEPITO:"GRILLO">', 0, h8cref_pos)
            
            if pepito_start_pos != -1:
                # Buscar el primer </Message> después del H8CREF_CONCAT
                message_end_pos = content.find('</Message>', h8cref_pos)
                
                if message_end_pos != -1:
                    # Extraer el bloque de texto desde <PEPITO:"GRILLO"> hasta </Message>
                    extracted_text = content[pepito_start_pos:message_end_pos + len('</Message>')]
                    
                    # Guardar el texto extraído en un nuevo archivo en la carpeta de salida
                    output_file_name = os.path.join(output_folder, f'{h8cref_concat}.txt')
                    with open(output_file_name, 'w', encoding='utf-8') as output_file:
                        output_file.write(extracted_text)





















# Iterar sobre los valores de AAAAMM desde 201801 hasta 201809
for year_month in range(201801, 201810):
    # Generar el nombre del archivo de entrada
    input_file_name = f'saa_query_final_{year_month}.txt'
    
    # Leer el contenido del archivo de texto
    try:
        with open(input_file_name, 'r', encoding='utf-8') as file:
            content = file.read()
    except FileNotFoundError:
        print(f"Archivo {input_file_name} no encontrado. Se omite.")
        continue
    
    # Filtrar filas en listado_de_ref por FECHA (AAAAMM)
    filtered_df = listado_de_ref[listado_de_ref['FECHA'] == str(year_month)]
    
    # Crear la subcarpeta para el AAAAMM si no existe
    month_output_folder = os.path.join(output_folder, str(year_month))
    os.makedirs(month_output_folder, exist_ok=True)
    
    # Buscar y extraer los bloques de texto para cada H8CREF_CONCAT en el archivo actual
    for h8cref_concat in filtered_df['H8CREF_CONCAT']:
        # Buscar la posición del H8CREF_CONCAT
        h8cref_pos = content.find(h8cref_concat)
        
        if h8cref_pos != -1:
            # Buscar el primer <PEPITO:"GRILLO"> anterior a la posición de H8CREF_CONCAT
            pepito_start_pos = content.rfind('<PEPITO:"GRILLO">', 0, h8cref_pos)
            
            if pepito_start_pos != -1:
                # Buscar el primer </Message> después del H8CREF_CONCAT
                message_end_pos = content.find('</Message>', h8cref_pos)
                
                if message_end_pos != -1:
                    # Extraer el bloque de texto desde <PEPITO:"GRILLO"> hasta </Message>
                    extracted_text = content[pepito_start_pos:message_end_pos + len('</Message>')]
                    
                    # Guardar el texto extraído en un nuevo archivo en la subcarpeta correspondiente
                    output_file_name = os.path.join(month_output_folder, f'{h8cref_concat}.txt')
                    with open(output_file_name, 'w', encoding='utf-8') as output_file:
                        output_file.write(extracted_text)

# Mostrar los DataFrames resultantes
print("info_completa_listado_de_ref")
print(info_completa_listado_de_ref)

print("\nlistado_de_ref")
print(listado_de_ref)






# Realizar el cruce de datos con indicator=True
merged_df = pd.merge(df_base_A, df_base_B, 
                     left_on=['TITULO_ESPECIE', 'COMITENTE', 'CANTIDAD', 'FECHA'], 
                     right_on=['H8SCID', 'H8ASOS', 'H8SQTY', 'H8ATSD'],
                     how='outer', indicator=True)

# Filtrar los datos que no cruzan (diferentes en base_A y base_B)
non_matching_df = merged_df[merged_df['_merge'] != 'both']

# Opcional: Eliminar la columna '_merge' si no es necesaria
non_matching_df.drop(columns=['_merge'], inplace=True)







#######$$$&&

import pandas as pd

# Leer el archivo de Excel
file_path = 'ruta_al_archivo.xlsx'

# Leer las hojas en DataFrames
df_base_A = pd.read_excel(file_path, sheet_name='base_A')
df_base_B = pd.read_excel(file_path, sheet_name='base_B')

# Convertir las columnas relevantes a tipo numérico y fecha
df_base_A['TITULO_ESPECIE'] = pd.to_numeric(df_base_A['TITULO_ESPECIE'], errors='coerce')
df_base_A['COMITENTE'] = pd.to_numeric(df_base_A['COMITENTE'], errors='coerce')
df_base_A['CANTIDAD'] = pd.to_numeric(df_base_A['CANTIDAD'], errors='coerce')
df_base_A['FECHA'] = pd.to_datetime(df_base_A['FECHA'], format='%d-%m-%Y', errors='coerce')

df_base_B['H8SCID'] = pd.to_numeric(df_base_B['H8SCID'], errors='coerce')
df_base_B['H8ASOS'] = pd.to_numeric(df_base_B['H8ASOS'], errors='coerce')
df_base_B['H8SQTY'] = pd.to_numeric(df_base_B['H8SQTY'], errors='coerce') / 1000000
df_base_B['H8ATSD'] = pd.to_datetime(df_base_B['H8ATSD'], format='%Y%m%d', errors='coerce')

# Realizar la comparación y filtrado
matched_rows = df_base_A[
    (df_base_A['TITULO_ESPECIE'].isin(df_base_B['H8SCID'])) &
    (df_base_A['COMITENTE'].isin(df_base_B['H8ASOS'])) &
    (df_base_A['CANTIDAD'].isin(df_base_B['H8SQTY'])) &
    (df_base_A['FECHA'].isin(df_base_B['H8ATSD']))
]

# Agregar la columna H8CREF de df_base_B al DataFrame resultante
result_df = matched_rows.copy()
result_df = result_df.merge(df_base_B[['H8SCID', 'H8ASOS', 'H8SQTY', 'H8ATSD', 'H8CREF']], 
                            left_on=['TITULO_ESPECIE', 'COMITENTE', 'CANTIDAD', 'FECHA'], 
                            right_on=['H8SCID', 'H8ASOS', 'H8SQTY', 'H8ATSD'], 
                            how='left')

# Seleccionar solo las columnas de base_A más H8CREF
result_df = result_df[df_base_A.columns.tolist() + ['H8CREF']]

# Mostrar el DataFrame resultante
print(result_df)







#######$$$&&

# Realizar el cruce de datos
merged_df = pd.merge(df_base_A, df_base_B[['H8SCID', 'H8ASOS', 'H8SQTY', 'H8ATSD', 'H8CREF']], 
                     left_on=['TITULO_ESPECIE', 'COMITENTE', 'CANTIDAD', 'FECHA'], 
                     right_on=['H8SCID', 'H8ASOS', 'H8SQTY', 'H8ATSD'], 
                     how='inner')

# Crear el DataFrame resultante con las columnas de base_A y H8CREF de base_B
result_df = merged_df[['TITULO_ESPECIE', 'COMITENTE', 'CANTIDAD', 'FECHA', 'H8CREF']]

# Mostrar el DataFrame resultante
print(result_df)
